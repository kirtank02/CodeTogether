This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-30T18:07:03.706Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  _not-found/
    page.tsx
  auth/
    page.tsx
  dotgrid/
    page.tsx
  editor/
    [roomid]/
      page.tsx
  sso-callback/
    page.tsx
  globals.css
  landing.tsx
  layout.tsx
  not-found.tsx
  page.tsx

================================================================
Repository Files
================================================================

================
File: app/_not-found/page.tsx
================
"use client"
import { Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import { motion } from "framer-motion";
import Link from "next/link";

function NotFoundContent() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-r from-gray-900 to-black text-white">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center"
      >
        <motion.h1
          className="text-6xl font-bold text-gray-100"
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.4 }}
        >
          404
        </motion.h1>
        <p className="mt-4 text-xl text-gray-400">Oops! Page Not Found.</p>

        <motion.div
          className="mt-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
        >
          <Link href="/">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-medium transition-all duration-300 shadow-lg"
            >
              Return Home
            </motion.button>
          </Link>
        </motion.div>
      </motion.div>
    </div>
  );
}


export default function NotFound() {
  return (
    <Suspense fallback={<div></div>}>
      <NotFoundContent />
    </Suspense>
  )
}

================
File: app/auth/page.tsx
================
"use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"
import { useUser } from "@clerk/nextjs"
import { Loader2 } from "lucide-react"
import AuthPage from "@/components/Auth/AuthDialog"

export default function AuthRoute() {
  const router = useRouter()
  const { isLoaded, isSignedIn } = useUser()

  // If user is already signed in, redirect to home page
  useEffect(() => {
    if (isLoaded && isSignedIn) {
      router.push("/")
    }
  }, [isLoaded, isSignedIn, router])

  // Handle successful authentication
  const handleSuccessfulAuth = () => {
    router.push("/")
  }

  // Show loading state while Clerk loads
  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center h-screen bg-slate-900">
        <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
      </div>
    )
  }

  // Render auth page if user is not signed in
  return <AuthPage onSuccessfulAuth={handleSuccessfulAuth} />
}

================
File: app/dotgrid/page.tsx
================
"use client";
import {
  Navbar,
  NavBody,
  NavItems,
  MobileNav,
  NavbarLogo,
  NavbarButton,
  MobileNavHeader,
  MobileNavToggle,
  MobileNavMenu,
} from "@/components/ui/resizable-navbar";
import { useState } from "react";

export default function Page() {
  const navItems = [
    {
      name: "Features",
      link: "#features",
    },
    {
      name: "Pricing",
      link: "#pricing",
    },
    {
      name: "Contact",
      link: "#contact",
    },
  ];

  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  return (
    <div className="relative w-full">
      <Navbar>
        {/* Desktop Navigation */}
        <NavBody>
          <NavbarLogo />
          <NavItems items={navItems} />
          <div className="flex items-center gap-4">
            <NavbarButton variant="secondary">Login</NavbarButton>
            <NavbarButton variant="primary">Book a call</NavbarButton>
          </div>
        </NavBody>

        {/* Mobile Navigation */}
        <MobileNav>
          <MobileNavHeader>
            <NavbarLogo />
            <MobileNavToggle
              isOpen={isMobileMenuOpen}
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            />
          </MobileNavHeader>

          <MobileNavMenu
            isOpen={isMobileMenuOpen}
            onClose={() => setIsMobileMenuOpen(false)}
          >
            {navItems.map((item, idx) => (
              <a
                key={`mobile-link-${idx}`}
                href={item.link}
                onClick={() => setIsMobileMenuOpen(false)}
                className="relative text-neutral-600 dark:text-neutral-300"
              >
                <span className="block">{item.name}</span>
              </a>
            ))}
            <div className="flex w-full flex-col gap-4">
              <NavbarButton
                onClick={() => setIsMobileMenuOpen(false)}
                variant="primary"
                className="w-full"
              >
                Login
              </NavbarButton>
              <NavbarButton
                onClick={() => setIsMobileMenuOpen(false)}
                variant="primary"
                className="w-full"
              >
                Book a call
              </NavbarButton>
            </div>
          </MobileNavMenu>
        </MobileNav>
      </Navbar>
      <DummyContent />

      {/* Navbar */}
    </div>
  );
}

const DummyContent = () => {
  return (
    <div className="container mx-auto p-8 pt-24">
      <h1 className="mb-4 text-center text-3xl font-bold">
        Check the navbar at the top of the container
      </h1>
      <p className="mb-10 text-center text-sm text-zinc-500">
        For demo purpose we have kept the position as{" "}
        <span className="font-medium">Sticky</span>. Keep in mind that this
        component is <span className="font-medium">fixed</span> and will not
        move when scrolling.
      </p>
      <div className="grid grid-cols-1 gap-4 md:grid-cols-4">
        {[
          {
            id: 1,
            title: "The",
            width: "md:col-span-1",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 2,
            title: "First",
            width: "md:col-span-2",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 3,
            title: "Rule",
            width: "md:col-span-1",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 4,
            title: "Of",
            width: "md:col-span-3",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 5,
            title: "F",
            width: "md:col-span-1",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 6,
            title: "Club",
            width: "md:col-span-2",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 7,
            title: "Is",
            width: "md:col-span-2",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 8,
            title: "You",
            width: "md:col-span-1",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 9,
            title: "Do NOT TALK about",
            width: "md:col-span-2",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
          {
            id: 10,
            title: "F Club",
            width: "md:col-span-1",
            height: "h-60",
            bg: "bg-neutral-100 dark:bg-neutral-800",
          },
        ].map((box) => (
          <div
            key={box.id}
            className={`${box.width} ${box.height} ${box.bg} flex items-center justify-center rounded-lg p-4 shadow-sm`}
          >
            <h2 className="text-xl font-medium">{box.title}</h2>
          </div>
        ))}
      </div>
    </div>
  );
};

================
File: app/editor/[roomid]/page.tsx
================
"use client"
import { useState, useRef, useEffect, useMemo, Suspense } from "react"
import { motion, AnimatePresence, useAnimation } from "framer-motion"
import { toast, Toaster } from "sonner"
import { useParams, useSearchParams } from "next/navigation"
import { ACTIONS } from "@/lib/actions"
import {
  LogOut,
  Play,
  ChevronRight,
  ChevronLeft,
  Maximize,
  Minimize,
  SunMoon,
  Moon,
  Settings,
  Save,
  Download,
  Share,
  Upload,
  Terminal,
  Bot,
  Sparkles,
  MessageSquare,
  Edit,
  PencilRuler,
  Twitch,
  BugPlay,
} from "lucide-react"
import { useSocket } from "@/providers/socketProvider"
import dynamic from "next/dynamic"
import Whiteboard from "@/components/Editor/WhiteBoard"
import ConsoleOutput from "@/components/Editor/ConsoleOutput"
const Button = dynamic(
  () => import("@/components/ui/button").then((mod) => mod.Button)
);
const Slider = dynamic(
  () => import("@/components/ui/slider").then((mod) => mod.Slider)
);
const Select = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.Select)
);
const SelectTrigger = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.SelectTrigger)
);
const SelectValue = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.SelectValue)
);
const SelectContent = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.SelectContent)
);
const SelectItem = dynamic(
  () => import("@/components/ui/select").then((mod) => mod.SelectItem)
);
const ScrollArea = dynamic(
  () =>
    import("@/components/ui/scroll-area").then((mod) => mod.ScrollArea)
);
const Dialog = dynamic(
  () => import("@/components/ui/dialog").then((mod) => mod.Dialog)
);
const DialogContent = dynamic(
  () =>
    import("@/components/ui/dialog").then((mod) => mod.DialogContent)
);
const DialogHeader = dynamic(
  () =>
    import("@/components/ui/dialog").then((mod) => mod.DialogHeader)
);
const DialogTitle = dynamic(
  () =>
    import("@/components/ui/dialog").then((mod) => mod.DialogTitle)
);
const DialogDescription = dynamic(
  () =>
    import("@/components/ui/dialog").then((mod) => mod.DialogDescription)
);
const Input = dynamic(
  () => import("@/components/ui/input").then((mod) => mod.Input)
);
const Client = dynamic(
  () => import("@/components/Editor/Client").then((mod) => mod.Client),
  { ssr: false }
);
const Chat = dynamic(
  () => import("@/components/Editor/Chat").then((mod) => mod.Chat),
  { ssr: false }
);
const Skeleton = dynamic(
  () => import("@/components/ui/skeleton").then((mod) => mod.Skeleton)
);
// const ConsoleOutput = dynamic(
//   () =>
//     import("@/components/Editor/ConsoleOutput").then((mod) => mod.default),
//   // { ssr: false }
// );
const AiAssistant = dynamic(
  () =>
    import("@/components/Editor/AiAssistant").then((mod) => mod.default),
  { ssr: false }
);
const WaveLoader = dynamic(
  () =>
    import("@/components/Dashboard/animations/WaveLoader").then((mod) => mod.default),
  { ssr: false }
);
const MonacoEditor = dynamic(() => import("@/components/Editor/monaco-editor"), {
  ssr: false,
  loading: () => <div>Loading...</div>
});

// const Whiteboard = dynamic(
//   () => import("@/components/Editor/Whiteboard").then((mod) => mod.default),
//   { ssr: false }
// );

function EditorPageContent() {
  // Socket and Client State
  const socketRef = useRef<any>(null)
  const [clients, setClients] = useState<{ socketId: string; username: string }[]>([])
  const params = useParams()
  const searchParams = useSearchParams()
  const roomId = params?.roomid
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [isSocketConnected, setIsSocketConnected] = useState(false)
  const [connectionStatus, setConnectionStatus] = useState<"connecting" | "connected" | "failed">("connecting")
  const username = searchParams.get("username")
  const [typingUser, setTypingUser] = useState<string | null>(null)
  const [consoleHeight, setConsoleHeight] = useState(240)
  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({})
  const [isConsoleOpen, setIsConsoleOpen] = useState(true);
  const [showConnectingSplash, setShowConnectingSplash] = useState(true);
  const [isAiPanelOpen, setIsAiPanelOpen] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [isWhiteboardOpen, setIsWhiteboardOpen] = useState(false);


  // Editor State
  const [fontSize, setFontSize] = useState(14)
  const [language, setLanguage] = useState("javascript")
  const [theme, setTheme] = useState("vs-dark")

  // UI State
  const [isSidebarOpen, setIsSidebarOpen] = useState(true)
  const [isOutputPanelOpen, setIsOutputPanelOpen] = useState(true)
  const [isDarkMode, setIsDarkMode] = useState(true)
  const [activeTab, setActiveTab] = useState("code")
  const [isSettingsOpen, setIsSettingsOpen] = useState(false)
  const [isPageLoaded, setIsPageLoaded] = useState(false)
  const [isShareDialogOpen, setIsShareDialogOpen] = useState(false)
  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false)

  // Refs
  const editorRef = useRef<any>(null)
  const outputRef = useRef(null)
  const controls = useAnimation()
  const [code, setCode] =
    useState(`//Start Coding Here...
  // Function to print a pyramid pattern
  function printPyramid(height) {
      let pattern = '';
      
      // Loop through each row
      for (let i = 1; i <= height; i++) {
          // Add spaces before stars
          let spaces = ' '.repeat(height - i);
          
          // Add stars for this row
          let stars = '*'.repeat(2 * i - 1);
          
          // Combine spaces and stars for this row
          pattern += spaces + stars + '\\n';
      }
      
      return pattern;
  }
  console.log(printPyramid(5));`);

  const [typingUsers, setTypingUsers] = useState(new Set())
  const [output, setOutput] = useState("")
  const [consoleOutput, setConsoleOutput] = useState<Array<{ type: "log" | "error" | "info"; content: string }>>([])
  const lastTypingEventRef = useRef<number>(0)
  const TYPING_INTERVAL = 1000 // Minimum time between typing events in ms
  const { socket, isConnected } = useSocket()

  useEffect(() => {
    const timer = setTimeout(() => {
      setShowConnectingSplash(false);
    }, 2000); // 2 seconds

    return () => clearTimeout(timer);
  }, []);

  // Memoized variants
  const pageVariants = useMemo(
    () => ({
      hidden: { opacity: 0, scale: 0.9 },
      visible: {
        opacity: 1,
        scale: 1,
        transition: {
          duration: 0.5,
          ease: "easeOut",
          staggerChildren: 0.1,
        },
      },
    }),
    [],
  )

  const itemVariants = useMemo(
    () => ({
      hidden: { y: 20, opacity: 0 },
      visible: {
        y: 0,
        opacity: 1,
        transition: { duration: 0.5, ease: "easeOut" },
      },
    }),
    [],
  )

  // Effects
  useEffect(() => {
    // Trigger initial animation when the page loads
    setIsPageLoaded(true)
    controls.start("visible")
  }, [controls])

  useEffect(() => {
    if (!socket || !isConnected) return

    if (!username || !roomId) {
      toast.error("Missing room ID or username")
      window.location.href = "/"
      return
    }

    console.log("Joining room with:", { roomId, username: username })

    socket.emit(ACTIONS.JOIN, {
      id: roomId,
      user: username,
    })

    // Handle join response
    socket.on(ACTIONS.JOINED, ({ clients, user, socketId }) => {
      console.log("JOINED event received:", { clients, user, socketId })
      toast.success(`${user} joined the room`)
      setClients(clients)
      setConnectionStatus("connected")
      setIsLoading(false)
    })

    socket.on(ACTIONS.DISCONNECTED, ({ socketId, user, clients: updatedClients }) => {
      console.log("DISCONNECTED event received:", { socketId, user, clients: updatedClients })
      setClients(updatedClients)
      toast.info(`${user} left the room`)
    })

    const handleBeforeUnload = () => {
      if (socket && roomId) {
        socket.emit(ACTIONS.LEAVE, { roomId })
      }
    }

    window.addEventListener("beforeunload", handleBeforeUnload)

    socket.on(ACTIONS.CODE_CHANGE, ({ code }) => {
      setCode(code)
    })

    socket.on(ACTIONS.SYNC_CODE, ({ code }) => {
      setCode(code)
    })

    socket.on(ACTIONS.COMPILE_RESULT, ({ result, error }) => {
      if (error) {
        setOutput(error)
        setConsoleOutput((prev) => [...prev, { type: "error", content: error }])
      } else {
        setOutput(result)
        setConsoleOutput((prev) => [...prev, { type: "log", content: result }])
      }
    })

    socket.on("error", handleSocketError)

    return () => {
      socket.off(ACTIONS.JOINED)
      socket.off(ACTIONS.DISCONNECTED)
      socket.off(ACTIONS.CODE_CHANGE)
      socket.off(ACTIONS.SYNC_CODE)
      handleBeforeUnload()
      window.removeEventListener("beforeunload", handleBeforeUnload)
      socket.off(ACTIONS.COMPILE_RESULT)
      socket.off("error")
    }
  }, [socket, isConnected, roomId, username])

  useEffect(() => {
    if (!socket || !isConnected) return

    // Handle typing events
    const handleTyping = ({ username }: { username: string }) => {
      setTypingUsers((prev) => {
        const newSet = new Set(prev)
        newSet.add(username)
        return newSet
      })

      // Clear existing timeout for this user if it exists
      if (typingTimeoutRef.current[username]) {
        clearTimeout(typingTimeoutRef.current[username])
      }

      // Set new timeout
      typingTimeoutRef.current[username] = setTimeout(() => {
        setTypingUsers((prev) => {
          const newSet = new Set(prev)
          newSet.delete(username)
          return newSet
        })
        delete typingTimeoutRef.current[username]
      }, 1500) // Slightly longer than the server timeout
    }

    const handleStopTyping = ({ username }: { username: string }) => {
      // Clear timeout if it exists
      if (typingTimeoutRef.current[username]) {
        clearTimeout(typingTimeoutRef.current[username])
        delete typingTimeoutRef.current[username]
      }

      setTypingUsers((prev) => {
        const newSet = new Set(prev)
        newSet.delete(username)
        return newSet
      })
    }

    socket.on(ACTIONS.TYPING, handleTyping)
    socket.on(ACTIONS.STOP_TYPING, handleStopTyping)

    // Cleanup
    return () => {
      socket.off(ACTIONS.TYPING)
      socket.off(ACTIONS.STOP_TYPING)
      // Clear all typing timeouts
      Object.values(typingTimeoutRef.current).forEach(clearTimeout)
      typingTimeoutRef.current = {}
    }
  }, [socket, isConnected])

  // Handlers
  const clearConsole = () => setConsoleOutput([])

  const handleCodeChange = (value: string) => {
    setCode(value)
    socket?.emit(ACTIONS.CODE_CHANGE, { roomId, code: value })

    if (!username) return

    // Clear any existing typing timeout
    if (typingTimeoutRef.current) {
      Object.values(typingTimeoutRef.current).forEach(clearTimeout)
    }

    // Always emit typing event for the current user
    socket?.emit(ACTIONS.TYPING, {
      roomId,
      username,
    })

    // Set timeout to clear typing status
    if (!username) return
    typingTimeoutRef.current[username] = setTimeout(() => {
      socket?.emit(ACTIONS.STOP_TYPING, {
        roomId,
        username,
      })
    }, 1000)
  }

  const handleRunCode = () => {
    try {
      socket?.emit(ACTIONS.COMPILE, { roomId, code, language })
    } catch (err: any) {
      setOutput(`Error: ${err.message}`)
    }
  }

  const handleSocketError = (err: any) => {
    console.error("Socket error:", err)
    toast.error(err.message || "Failed to connect to server. Please try again.")
  }

  const copyRoomId = async () => {
    try {
      await navigator.clipboard.writeText(roomId as string)
      toast.success("Room ID copied to clipboard")
    } catch (err: any) {
      toast.error("Failed to copy room ID")
    }
  }

  const leaveRoom = () => {
    setIsLeaveDialogOpen(true)
  }

  const confirmLeaveRoom = () => {
    try {
      if (socket) {
        socket.emit(ACTIONS.LEAVE, { roomId })
        socket.disconnect()
      }
      window.location.href = "/"
    } catch (error) {
      console.error("Error leaving room:", error)
      toast.error("Failed to leave room")
    }
  }

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen()
      setIsFullscreen(true)
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen()
        setIsFullscreen(false)
      }
    }
  }

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
    setTheme(isDarkMode ? "vs-light" : "vs-dark");

    // Update monaco editor theme
    if (editorRef.current) {
      editorRef.current.updateOptions({
        theme: isDarkMode ? "vs-light" : "vs-dark"
      });
    }

    // Update document theme class for Tailwind
    document.documentElement.classList.toggle("dark");
  };

  const toggleSettings = () => {
    setIsSettingsOpen(!isSettingsOpen)
  }

  // Render functions
  const renderSkeleton = () => (
    <div className="flex flex-col space-y-4 animate-pulse">
      <Skeleton className="h-12 w-full" />
      <div className="flex space-x-4">
        <Skeleton className="h-8 w-24" />
        <Skeleton className="h-8 w-24" />
      </div>
      <Skeleton className="h-64 w-full" />
      <div className="flex space-x-4">
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-8 w-1/3" />
      </div>
    </div>
  )

  if (showConnectingSplash) {
    return (
      <div className="flex h-screen w-full  overflow-hidden items-center justify-center bg-black/100">
        <motion.div
          className="flex flex-col items-center space-y-8 p-12 backdrop-blur-lg rounded-3xl shadow-2xl"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, ease: "easeOut" }}
          variants={pageVariants}
        >
          <motion.h2
            className="text-4xl font-bold text-white text-center"
            initial={{ y: -20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.5 }}
          >
            Connecting to session
          </motion.h2>
          <div className="relative w-40 h-40">
            <WaveLoader />
          </div>
          <motion.div
            className="text-blue-300 text-lg"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.5 }}
          >
            Please wait...
          </motion.div>
        </motion.div>
      </div>
    );
  }

  if (connectionStatus === "connecting") {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
        <motion.div
          className="flex flex-col items-center space-y-4"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="text-2xl font-bold text-white">Connecting to session...</div>
          <motion.div
            className="w-20 h-20 border-4 border-blue-500 border-t-transparent rounded-full"
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          />
        </motion.div>
      </div>
    )
  }

  if (connectionStatus === "failed") {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
        <motion.div
          className="flex flex-col items-center space-y-6 text-white"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <div className="text-3xl font-bold">Failed to connect to session</div>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => window.location.reload()}
            className="px-6 py-3 bg-blue-600 rounded-lg text-lg font-semibold hover:bg-blue-700 transition-colors"
          >
            Retry Connection
          </motion.button>
        </motion.div>
      </div>
    )
  }

  return (
    <motion.div
      className={`h-screen w-full overflow-hidden flex ${isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100  text-black"
        }`}
      initial="hidden"
      animate={isPageLoaded ? "visible" : "hidden"}
      variants={pageVariants}
    >
      {/* Sidebar */}
      <AnimatePresence>
        {isSidebarOpen && (
          <motion.div
            variants={itemVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            className={`w-80 
              bg-gradient-to-b from-gray-800 to-gray-900 border-gray-700 text-black
              border-r flex flex-col`}
          >
            {/* Connected Users */}
            <ScrollArea className="flex-1 p-4">
              <motion.h2
                variants={itemVariants}
                className={`text-sm justify-center items-center text-center mx-auto font-semibold uppercase mb-4 ${isDarkMode
                  ? "text-gray-400"
                  : "text-gray-600"
                  }`}
              >                <span className="bg-gradient-to-r from-cyan-300 to-blue-400 text-transparent bg-clip-text">Connected</span> <span className="text-gray-400 lowercase">({clients.length} users)</span>
              </motion.h2>
              <motion.div className="max-h-[calc(100vh-200px)] overflow-y-auto space-y-3" variants={itemVariants}>
                {clients.map((client) => (
                  <motion.div key={client.socketId} variants={itemVariants}>
                    <Client
                      user={client.username}
                      isActive={client.socketId === socket?.id}
                      isTyping={typingUsers.has(client.username)}
                      lastActive={new Date().toISOString()}
                      messageCount={0}
                      mood={null}
                    />
                  </motion.div>
                ))}
              </motion.div>
            </ScrollArea>

            {/* Room Controls */}

            <motion.div
              className="p-4 border-t border-gray-700 space-y-3"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.4 }}
            >
              <motion.div
                className="rounded-lg bg-gradient-to-br from-gray-100 to-gray-300 p-0.5 shadow-lg"
                whileHover={{ boxShadow: "0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)" }}
                transition={{ duration: 0.2 }}
              >
                <Button
                  data-color="white"
                  variant="secondary"
                  className="bg-gradient-to-br from-white to-gray-100 text-black w-full h-10 rounded-lg border-none relative overflow-hidden shadow-inner"
                  onClick={() => setIsShareDialogOpen(true)}
                >
                  <motion.div
                    className="absolute inset-0 bg-gradient-to-r from-blue-50 via-white to-blue-50 opacity-0"
                    initial={{ opacity: 0 }}
                    whileHover={{ opacity: 1 }}
                    transition={{ duration: 0.3 }}
                  />

                  <motion.div
                    className="flex items-center justify-center relative z-10"
                    initial={{ gap: "0.5rem" }}
                    whileHover={{ gap: "0.75rem" }}
                    transition={{ duration: 0.2 }}
                  >
                    <motion.div
                      whileHover={{ rotate: 180 }}
                      transition={{ duration: 0.6, ease: "circOut" }}
                    >
                      <Share className="h-5 w-5" />
                    </motion.div>
                    <span className="font-medium">Share Room</span>
                  </motion.div>
                </Button>
              </motion.div>

              <motion.div
                className="rounded-lg bg-gradient-to-br from-red-500 to-red-600 p-0.5 shadow-lg"
                whileHover={{
                  boxShadow: "0 10px 25px -5px rgba(239, 68, 68, 0.4), 0 10px 10px -5px rgba(239, 68, 68, 0.1)",
                }}
                transition={{ duration: 0.2 }}
              >
                <Button
                  data-color="red"
                  variant="destructive"
                  className="bg-gradient-to-br from-red-500 to-red-600 w-full h-10 rounded-lg border-none relative overflow-hidden shadow-inner"
                  onClick={leaveRoom}
                >
                  <motion.div
                    className="absolute inset-0 bg-gradient-to-r from-red-600 to-red-500"
                    animate={{
                      x: ["-100%", "100%"],
                    }}
                    transition={{
                      repeat: Infinity,
                      repeatType: "mirror",
                      duration: 2,
                      ease: "linear"
                    }}
                    style={{ opacity: 0.2 }}
                  />

                  <motion.div className="flex items-center justify-center relative z-10">
                    <motion.div
                      whileHover={{ x: 5 }}
                      transition={{ repeat: Infinity, repeatType: "mirror", duration: 0.5 }}
                    >
                      <LogOut className="h-5 w-5 mr-2" />
                    </motion.div>
                    <span className="font-medium">Leave Room</span>
                  </motion.div>
                </Button>
              </motion.div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Editor Section */}
      <motion.div className="flex-1 h-full flex flex-col overflow-hidden" variants={itemVariants}>
        {/* Editor Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            type: "spring",
            stiffness: 200,
            damping: 15,
            duration: 0.5
          }}
          className={`${isDarkMode
            ? "bg-gray-800 border-gray-700"
            : "bg-white border-gray-200"
            } border-b p-4 flex items-center justify-between`}
        >
          <div className="flex items-center space-x-4">
            <motion.div
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsSidebarOpen(!isSidebarOpen)}
              >
                {isSidebarOpen ? <ChevronLeft className="h-5 w-5" /> : <ChevronRight className="h-5 w-5" />}
              </Button>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              initial={{ backgroundColor: "transparent" }}
              animate={{
                backgroundColor: isSidebarOpen ? "rgba(22, 163, 74, 0.2)" : "transparent"
              }}
              transition={{ duration: 0.3 }}
              className="rounded-xl text-white" 
            >
              <Button
                variant="default"
                className="bg-green-500 text-white hover:bg-green-600 transition-colors duration-200"
                onClick={handleRunCode}
              >
                <BugPlay className="mr-1" />
                Run Code
              </Button>
            </motion.div>

            <div className={`${isDarkMode ? "text-gray-400" : "text-gray-600 bg-cyan-700"}`}>
              Language: {language}
            </div>
          </div>
          <div className="flex items-center space-x-4 mr-8">
            <Button
              variant="ghost"
              onClick={() => setIsAiPanelOpen(!isAiPanelOpen)}
              className="relative h-10 px-4 group"
            >
              <span className="flex items-center">
                {/* <Twitch className="h-5 w-5 mr-2 group-hover:text-blue-400 transition-colors  hover:bg-white" /> */}
                <div className="mr-1">
                  {/* <svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 20 20">Icon from Fluent UI System Color Icons by Microsoft Corporation - https://github.com/microsoft/fluentui-system-icons/blob/main/LICENSE<g fill="none"><path fill="url(#fluentColorAgents200)" d="M13.18 2H10.5C8.768 7.023 6.823 12.62 6.823 18h6.483a1.75 1.75 0 0 0 1.485-.825l3.998-6.42a1.43 1.43 0 0 0 0-1.51L14.98 3.13A2 2 0 0 0 13.18 2"></path><path fill="url(#fluentColorAgents201)" fillOpacity=".5" d="M13.18 2H10.5C8.768 7.023 6.823 12.62 6.823 18h6.483a1.75 1.75 0 0 0 1.485-.825l3.998-6.42a1.43 1.43 0 0 0 0-1.51L14.98 3.13A2 2 0 0 0 13.18 2"></path><path fill="url(#fluentColorAgents202)" d="M13.25 2.001H6.69c-.601 0-1.16.308-1.48.816l-3.942 6.25a1.75 1.75 0 0 0 0 1.867L5.13 17.06c.354.56.96.91 1.619.938l.067.002h.006a2 2 0 0 0 1.969-1.662l.003-.002L11.18 3.953a2 2 0 0 1 2.069-1.952"></path><path fill="url(#fluentColorAgents203)" fillOpacity=".4" d="M13.25 2.001H6.69c-.601 0-1.16.308-1.48.816l-3.942 6.25a1.75 1.75 0 0 0 0 1.867L5.13 17.06c.354.56.96.91 1.619.938l.067.002h.006a2 2 0 0 0 1.969-1.662l.003-.002L11.18 3.953a2 2 0 0 1 2.069-1.952"></path><defs><radialGradient id="fluentColorAgents200" cx="0" cy="0" r="1" gradientTransform="rotate(-87.881 17.698 4.836)scale(23.3302 18.6978)" gradientUnits="userSpaceOnUse"><stop stopColor="#FFC470"></stop><stop offset=".251" stopColor="#FF835C"></stop><stop offset=".584" stopColor="#F24A9D"></stop><stop offset=".871" stopColor="#B339F0"></stop><stop offset="1" stopColor="#C354FF"></stop></radialGradient><radialGradient id="fluentColorAgents201" cx="0" cy="0" r="1" gradientTransform="matrix(-9.9932 -9.83058 9.94854 -10.1131 11.777 16.154)" gradientUnits="userSpaceOnUse"><stop offset=".709" stopColor="#FFB357" stopOpacity="0"></stop><stop offset=".942" stopColor="#FFB357"></stop></radialGradient><radialGradient id="fluentColorAgents202" cx="0" cy="0" r="1" gradientTransform="rotate(-160.247 10.243 6.665)scale(22.9945 19.4416)" gradientUnits="userSpaceOnUse"><stop offset=".222" stopColor="#4E46E2"></stop><stop offset=".578" stopColor="#625DF6"></stop><stop offset=".955" stopColor="#E37DFF"></stop></radialGradient><linearGradient id="fluentColorAgents203" x1="4.823" x2="10.254" y1="8.629" y2="9.914" gradientUnits="userSpaceOnUse"><stop stopColor="#7563F7" stopOpacity="0"></stop><stop offset=".986" stopColor="#4916AE"></stop></linearGradient></defs></g></svg> */}
                  {/* <svg xmlns="http://www.w3.org/2000/svg" width="3em" height="3em" viewBox="0 0 24 24" >Icon from Fluent UI System Color Icons by Microsoft Corporation - https://github.com/microsoft/fluentui-system-icons/blob/main/LICENSE<g fill="none"><path fill="url(#fluentColorChatMore240)" d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10a9.96 9.96 0 0 1-4.644-1.142l-4.29 1.117a.85.85 0 0 1-1.037-1.036l1.116-4.289A9.96 9.96 0 0 1 2 12C2 6.477 6.477 2 12 2"></path><path fill="url(#fluentColorChatMore241)" d="M13.252 13H8.75l-.102.007a.75.75 0 0 0 0 1.486l.102.007h4.502l.101-.007a.75.75 0 0 0 0-1.486zm1.998-3.5h-6.5l-.102.007a.75.75 0 0 0 0 1.486L8.75 11h6.5l.102-.007a.75.75 0 0 0 0-1.486z"></path><defs><linearGradient id="fluentColorChatMore240" x1="2.714" x2="20.178" y1="5.751" y2="35.521" gradientUnits="userSpaceOnUse"><stop stopColor="#0FAFFF"></stop><stop offset="1" stopColor="#CC23D1"></stop></linearGradient><linearGradient id="fluentColorChatMore241" x1="8.7" x2="9.227" y1="9.588" y2="15.025" gradientUnits="userSpaceOnUse"><stop stopColor="#FDFDFD"></stop><stop offset="1" stopColor="#CCEAFF"></stop></linearGradient></defs></g></svg> */}
                  <svg xmlns="http://www.w3.org/2000/svg" width="3em" height="3em" viewBox="0 0 24 24">{/* Icon from Fluent UI System Color Icons by Microsoft Corporation - https://github.com/microsoft/fluentui-system-icons/blob/main/LICENSE */}<g fill="none"><path fill="url(#fluentColorChatMultiple240)" fillRule="evenodd" d="M22 13.5a7.5 7.5 0 1 0-4.411 6.836c1.258.29 2.613.54 3.236.652a.996.996 0 0 0 1.153-1.17a68 68 0 0 0-.681-3.143A7.5 7.5 0 0 0 22 13.5M14.517 18h-.034z" clipRule="evenodd"></path><path fill="url(#fluentColorChatMultiple241)" fillRule="evenodd" d="M2 10.5a7.5 7.5 0 1 1 4.411 6.836c-1.258.29-2.613.54-3.236.652a.996.996 0 0 1-1.153-1.17a68 68 0 0 1 .681-3.143A7.5 7.5 0 0 1 2 10.5M9.483 15h.034z" clipRule="evenodd"></path><defs><radialGradient id="fluentColorChatMultiple240" cx="0" cy="0" r="1" gradientTransform="matrix(6.90278 8.0094 -8.01592 6.9084 11.027 10.005)" gradientUnits="userSpaceOnUse"><stop offset=".63" stopColor="#3D35B1"></stop><stop offset=".85" stopColor="#6553C9"></stop><stop offset="1" stopColor="#7660D3"></stop></radialGradient><linearGradient id="fluentColorChatMultiple241" x1="2" x2="17.003" y1="3" y2="18" gradientUnits="userSpaceOnUse"><stop stopColor="#0FAFFF"></stop><stop offset="1" stopColor="#2764E7"></stop></linearGradient></defs></g></svg>
                </div>
                Ask AI
              </span>
              <motion.div
                className="absolute -top-1 -right-1"
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.5, 1, 0.5]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                <Sparkles className="h-3 w-3 text-blue-400" />
              </motion.div>
              <motion.div
                className="absolute left-0 bottom-0 w-full h-0.5 bg-blue-400"
                initial={{ scaleX: 0 }}
                animate={{ scaleX: isAiPanelOpen ? 1 : 0 }}
                transition={{ duration: 0.2 }}
              />
            </Button>


            <Button
              variant="ghost"
              onClick={() => setIsChatOpen(!isChatOpen)}
              className="relative h-10 px-4 group "
            >
              <span className="flex items-center">
                <MessageSquare className="h-5 w-5 mr-2 hover:bg-white group-hover:text-blue-400 transition-colors" />
                Chat
              </span>
              <motion.div
                className="absolute left-0 bottom-0 w-full h-0.5 bg-blue-400"
                initial={{ scaleX: 0 }}
                animate={{ scaleX: isChatOpen ? 1 : 0 }}
                transition={{ duration: 0.2 }}
              />
            </Button>

            <Button
              variant="ghost"
              onClick={() => setIsWhiteboardOpen(!isWhiteboardOpen)}
              className="relative h-10 px-4 group"
            >
              <span className="flex items-center">
                <PencilRuler className="h-5 w-5 mr-2 group-hover:text-blue-400 transition-colors" />
                Edit
              </span>
              <motion.div
                className="absolute left-0 bottom-0 w-full h-0.5 bg-blue-400"
                initial={{ scaleX: 0 }}
                animate={{ scaleX: isWhiteboardOpen ? 1 : 0 }}
                transition={{ duration: 0.2 }}
              />
            </Button>
          </div>
          <div className="flex items-center space-x-2">
            {[
              {
                icon: isFullscreen ? <Minimize className="h-5 w-5" /> : <Maximize className="h-5 w-5" />,
                onClick: toggleFullscreen
              },
              {
                icon: isDarkMode ? <Moon className="h-5 w-5" /> : <SunMoon className="h-5 w-5" />,
                onClick: toggleDarkMode
              },
              {
                icon: <Settings className="h-5 w-5" />,
                onClick: toggleSettings
              }
            ].map((button, index) => (
              <motion.div
                key={index}
                whileHover={{ rotate: 0, scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <Button variant="ghost" size="icon" onClick={button.onClick}>
                  {button.icon}
                </Button>
              </motion.div>
            ))}
          </div>
        </motion.div>
        {/* Editor and Output */}
        <motion.div className="flex-1 flex" variants={itemVariants}>
          {/* Code Editor */}
          <motion.div
            className="flex-1 flex flex-col overflow-hidden"
            variants={itemVariants}
          >
            <motion.div
              className="flex-1"
              ref={editorRef}
              style={{
                height: isConsoleOpen ? `calc(100vh - ${consoleHeight + 120}px)` : 'calc(100vh - 120px)',
                transition: 'height 0.3s ease'
              }}
            >
              {isLoading ? (
                renderSkeleton()
              ) : (
                <MonacoEditor
                  roomId={roomId as string}
                  language={language}
                  fontSize={fontSize}
                  value={code}
                  onChange={handleCodeChange}
                  theme={theme}
                />
              )}
            </motion.div>

            <ConsoleOutput
              isOpen={isConsoleOpen}
              onClose={() => setIsConsoleOpen(false)}
              consoleOutput={consoleOutput}
              onClear={clearConsole}
              height={consoleHeight}
              onHeightChange={setConsoleHeight}
              isSidebarOpen={isSidebarOpen}
              isDarkMode={isDarkMode}
            />
            {!isConsoleOpen && (
              <Button
                className="fixed bottom-4 right-4"
                onClick={() => setIsConsoleOpen(true)}
              >
                <Terminal className="w-4 h-4 mr-2" />
                Show Console
              </Button>
            )}
          </motion.div>


          {isChatOpen && (
            <motion.div
              className="w-90 border-l max-h-full border-gray-700 rounded-l-lg shadow-md overflow-hidden"
              variants={itemVariants}
              initial="hidden"
              animate="visible"
              exit="hidden"
            >
              <Chat
                roomId={roomId as string}
                username={username || ""}
                isOpen={true} // Always true - the container decides visibility
                onToggle={() => setIsChatOpen(false)}
              />
            </motion.div>
          )}

          <AiAssistant
            isOpen={isAiPanelOpen}
            onToggle={() => setIsAiPanelOpen(!isAiPanelOpen)}
          />
        </motion.div>
        <Whiteboard
          isOpen={isWhiteboardOpen}
          onToggle={() => setIsWhiteboardOpen(!isWhiteboardOpen)}
        />
      </motion.div>

      {/* Settings Panel */}
      <AnimatePresence>
        {isSettingsOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 1 }}
            animate={{ opacity: 1, y: 1, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 1 }}
            transition={{ type: "spring", stiffness: 300, damping: 25 }}
            className={`absolute right-4 top-16 w-80 p-6 rounded-lg shadow-lg ${isDarkMode ? "bg-gray-800" : "bg-white"
              }`}
          >
            <h3 className="text-xl font-semibold mb-6">Settings</h3>
            <div className="space-y-6">
              <div>
                <label htmlFor="fontSize" className="block mb-2 text-sm font-medium">
                  Font Size: {fontSize}px
                </label>
                <Slider
                  id="fontSize"
                  min={10}
                  max={24}
                  step={1}
                  value={[fontSize]}
                  onValueChange={(value) => setFontSize(value[0])}
                />
              </div>
              <div>
                <label htmlFor="language" className="block mb-2 text-sm font-medium">
                  Language
                </label>
                <Select value={language} onValueChange={setLanguage}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a language" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="javascript">JavaScript</SelectItem>
                    <SelectItem value="python">Python</SelectItem>
                    <SelectItem value="java">Java</SelectItem>
                    <SelectItem value="cpp">C++</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <label htmlFor="theme" className="block mb-2 text-sm font-medium">
                  Theme
                </label>
                <Select value={theme} onValueChange={setTheme}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a theme" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="vs-dark">Dark</SelectItem>
                    {/* <SelectItem value="vs-light">Light</SelectItem> */}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {!isOutputPanelOpen && (
        <motion.button
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: 20 }}
          transition={{ duration: 0.3 }}
          className="fixed right-0 top-1/2 transform -translate-y-1/2 bg-primary text-primary-foreground p-2 rounded-l-md"
          onClick={() => setIsOutputPanelOpen(true)}
        >
          <ChevronLeft className="h-5 w-5" />
        </motion.button>
      )}

      {/* Share Dialog */}
      <Dialog open={isShareDialogOpen} onOpenChange={setIsShareDialogOpen}>
        <DialogContent
          className={`sm:max-w-[425px] bg-white border-gray-200 text-black`}>
          <DialogHeader>
            <DialogTitle>Share Room</DialogTitle>
            <DialogDescription>Copy the link below to invite others to this room.</DialogDescription>
          </DialogHeader>
          <div className="flex items-center space-x-2">
            <Input className="italic text-black bg-white" value={`${window.location.origin}/editor/${roomId}`} readOnly />
            <Button className="bg-black text-white hover:bg-gray-800" onClick={copyRoomId}>Copy Room</Button>
          </div>
          <div className="text-sm text-gray-500 mt-2">
            Room ID can be used to rejoin this session later.
          </div>
        </DialogContent>
      </Dialog>

      {/* Leave Room Dialog */}
      <Dialog open={isLeaveDialogOpen} onOpenChange={setIsLeaveDialogOpen}>
        <DialogContent
          className={`sm:max-w-[425px] bg-white border-gray-200 text-black`}        >
          <DialogHeader>
            <DialogTitle>Leave Room</DialogTitle>
            <DialogDescription>Are you sure you want to leave this room?</DialogDescription>
          </DialogHeader>
          <div className="flex justify-end space-x-2">
            <Button variant="outline" className="bg-black text-white" onClick={() => setIsLeaveDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" className="bg-rose-500 hover:bg-rose-600 text-white" onClick={confirmLeaveRoom}>
              Leave
            </Button>
          </div>
        </DialogContent>
      </Dialog>
      <Toaster />
    </motion.div>
  )
}

export default function EditorPage() {
  return (
    <Suspense fallback={<div></div>}>
      <EditorPageContent />
    </Suspense>
  )
}

================
File: app/sso-callback/page.tsx
================
"use client";
import { useEffect } from "react";
import { useClerk } from "@clerk/nextjs";
import { useRouter } from "next/navigation";

export default function SSOCallback() {
  const { handleRedirectCallback } = useClerk();
  const router = useRouter();

  useEffect(() => {
    async function processOAuthCallback() {
      try {
        await handleRedirectCallback({
          redirectUrl: window.location.origin + "/sso-callback",
          afterSignInUrl: "/",
          afterSignUpUrl: "/"
        });
      } catch (error) {
        console.error("OAuth callback error:", error);
        router.push("/");
      }
    }
    processOAuthCallback();
  }, [handleRedirectCallback, router]);

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-900">
      <div className="w-16 h-16 border-4 border-t-blue-500 border-gray-700 rounded-full animate-spin mb-4" />
      <p className="text-gray-400 text-lg">Completing authentication...</p>
    </div>
  );
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

/* body:before, body:after {
  content: none !important;
  background: transparent !important;
} */


@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}

/* Smooth Navbar Animations - Add to globals.css */

/* Fix the top gap issue */
body {
  padding-top: 0 !important;
  margin-top: 0 !important;
}

/* Hardware acceleration and performance optimizations */
.navbar-full,
.navbar-compact,
.mobile-navbar-full,
.mobile-navbar-compact {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;
  will-change: transform, width, height, margin, padding, border-radius, box-shadow;
}

/* Desktop Navbar States */
.navbar-full {
  width: 100% !important;
  height: 80px !important;
  padding-left: 48px !important;
  padding-right: 48px !important;
  margin-left: 0px !important;
  margin-right: 0px !important;
  margin-top: 0px !important;
  border-radius: 0px !important;
  transform: translateX(0%) translateZ(0) !important;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1) !important;
  transition: all 0.4s cubic-bezier(0.25, 0.1, 0.25, 1) !important;
  position: relative !important;
  top: 0 !important;
}

.navbar-compact {
  width: 800px !important;
  max-width: 800px !important;
  height: 60px !important;
  padding-left: 32px !important;
  padding-right: 32px !important;
  margin-left: 50% !important;
  margin-right: 0px !important;
  margin-top: 16px !important;
  border-radius: 20px !important;
  transform: translateX(-50%) translateZ(0) !important;
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(255, 255, 255, 0.1) !important;
  transition: all 0.4s cubic-bezier(0.25, 0.1, 0.25, 1) !important;
}

/* Mobile Navbar States */
.mobile-navbar-full {
  height: 80px !important;
  padding-left: 32px !important;
  padding-right: 32px !important;
  margin-left: 0px !important;
  margin-right: 0px !important;
  margin-top: 0px !important;
  border-radius: 0px !important;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1) !important;
  transition: all 0.4s cubic-bezier(0.25, 0.1, 0.25, 1) !important;
}

.mobile-navbar-compact {
  height: 60px !important;
  padding-left: 24px !important;
  padding-right: 24px !important;
  margin-left: 16px !important;
  margin-right: 16px !important;
  margin-top: 16px !important;
  border-radius: 20px !important;
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(255, 255, 255, 0.1) !important;
  transition: all 0.4s cubic-bezier(0.25, 0.1, 0.25, 1) !important;
}

/* Smooth transitions for all navbar elements */
.navbar-full *,
.navbar-compact *,
.mobile-navbar-full *,
.mobile-navbar-compact * {
  transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}

/* Additional performance optimizations */
@media (prefers-reduced-motion: no-preference) {
  .navbar-full,
  .navbar-compact,
  .mobile-navbar-full,
  .mobile-navbar-compact {
    transition-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1);
    transition-duration: 0.4s;
  }
}

/* Fallback for reduced motion users */
@media (prefers-reduced-motion: reduce) {
  .navbar-full,
  .navbar-compact,
  .mobile-navbar-full,
  .mobile-navbar-compact {
    transition: none !important;
  }
}

/* Improve performance with GPU acceleration */
.navbar-full,
.navbar-compact {
  transform-style: preserve-3d;
}

/* Ensure proper stacking context */
.navbar-full,
.navbar-compact,
.mobile-navbar-full,
.mobile-navbar-compact {
  isolation: isolate;
}

/* Smooth backdrop-filter transitions */
.navbar-full,
.navbar-compact,
.mobile-navbar-full,
.mobile-navbar-compact {
  transition-property: transform, width, height, margin, padding, border-radius, box-shadow, background-color, backdrop-filter;
}

/* Optimize text rendering during transitions */
.navbar-full *,
.navbar-compact *,
.mobile-navbar-full *,
.mobile-navbar-compact * {
  text-rendering: optimizeSpeed;
}

.navbar-compact,
.mobile-navbar-compact {
  text-rendering: optimizeLegibility;
}

a,
button,
input,
select,
textarea,
[role="button"],
[data-magnetic] {
  /* cursor: none !important; */
}

.gsap-cursor-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 9999;
}

.cursor-dot {
  position: fixed;
  width: 8px;
  height: 8px;
  background-color: #00ffff;
  border-radius: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
  z-index: 9999;
  will-change: transform;
  transition: width 0.3s, height 0.3s, background-color 0.3s;
}

.cursor-follower {
  position: fixed;
  width: 36px;
  height: 36px;
  border: 2px solid #00ffff;
  border-radius: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
  z-index: 9998;
  will-change: transform;
  transition: width 0.3s, height 0.3s, border-color 0.3s;
  display: flex;
  align-items: center;
  justify-content: center;
}

.cursor-aura {
  position: fixed;
  width: 80px;
  height: 80px;
  background-color: rgba(0, 255, 255, 0.1);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  pointer-events: none;
  z-index: 9997;
  will-change: transform;
  transition: background-color 0.3s;
}

.cursor-trail {
  position: fixed;
  width: 12px;
  height: 12px;
  background-color: rgba(0, 210, 255, 0.4);
  border-radius: 50%;
  transform: translate(-50%, -50%) scale(0.5);
  pointer-events: none;
  z-index: 9996;
  will-change: transform;
  transition: background-color 0.3s;
}

.cursor-ripple {
  position: fixed;
  width: 80px;
  height: 80px;
  border: 2px solid #00ffff;
  border-radius: 50%;
  transform: translate(-50%, -50%) scale(0);
  pointer-events: none;
  z-index: 9995;
  will-change: transform;
}

.cursor-text {
  font-size: 12px;
  font-weight: 500;
  color: #00ffff;
  white-space: nowrap;
  user-select: none;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .cursor-dot,
  .cursor-follower,
  .cursor-aura,
  .cursor-trail,
  .cursor-ripple {
    display: none;
  }
}




/* Main cursor container */
.gsap-cursor-container {
  pointer-events: none;
  z-index: 10000;
}

/* Main cursor dot */
.cursor-dot {
  position: fixed;
  top: 0;
  left: 0;
  width: 8px;
  height: 8px;
  background-color: rgba(0, 255, 255, 0.9);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  z-index: 10003;
  box-shadow: 0 0 15px rgba(0, 255, 255, 0.5),
              0 0 5px rgba(0, 255, 255, 0.8),
              inset 0 0 5px rgba(255, 255, 255, 0.5);
  backdrop-filter: blur(1px);
  pointer-events: none;
  will-change: transform, width, height, opacity;
  transition: background-color 0.3s ease;
  mix-blend-mode: screen;
}

/* Following circle */
.cursor-follower {
  position: fixed;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  background-color: rgba(0, 255, 255, 0.05);
  border: 1.5px solid rgba(0, 255, 255, 0.5);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  z-index: 10001;
  backdrop-filter: blur(2px);
  pointer-events: none;
  will-change: transform, width, height, opacity;
  transition: border-color 0.3s ease, background-color 0.3s ease;
  box-shadow: 0 0 20px rgba(0, 255, 255, 0.2);
}

/* Aura effect */
.cursor-aura {
  position: fixed;
  top: 0;
  left: 0;
  width: 80px;
  height: 80px;
  background: radial-gradient(
    circle,
    rgba(0, 255, 255, 0.15) 0%,
    rgba(0, 255, 255, 0.08) 40%,
    rgba(0, 255, 255, 0) 70%
  );
  border-radius: 50%;
  transform: translate(-50%, -50%);
  z-index: 10000;
  mix-blend-mode: screen;
  pointer-events: none;
  will-change: transform, opacity;
}

/* Cursor trails container */
.cursor-trails-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 9999;
  overflow: hidden;
}

/* Individual trail dots */
.cursor-trail {
  position: fixed;
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background-color: rgba(0, 210, 255, 0.4);
  transform: translate(-50%, -50%);
  pointer-events: none;
  will-change: transform, opacity;
  z-index: 9999;
  filter: blur(1px);
  mix-blend-mode: screen;
  box-shadow: 0 0 8px rgba(0, 255, 255, 0.3);
  opacity: calc(0.4 - (var(--index, 0) * 0.04));
}

/* Ripple effect for clicks */
.cursor-ripple {
  position: fixed;
  top: 0;
  left: 0;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  border: 2px solid rgba(0, 255, 255, 0.8);
  transform: translate(-50%, -50%);
  pointer-events: none;
  z-index: 9998;
  box-shadow: 0 0 20px rgba(0, 255, 255, 0.4),
              inset 0 0 15px rgba(0, 255, 255, 0.3);
}

/* Custom styles for different cursor states */
[data-cursor="pointer"] .cursor-dot {
  transform: translate(-50%, -50%) scale(0.7);
  background-color: rgb(0, 255, 255);
}

[data-cursor="pointer"] .cursor-follower {
  transform: translate(-50%, -50%) scale(1.3);
  background-color: rgba(0, 255, 255, 0.15);
  border-color: rgba(0, 255, 255, 0.8);
}

/* Stunning cyan glow on hover effects for interactive elements */
/* a:hover, button:hover, [role="button"]:hover {
  box-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
  transition: all 0.3s ease;
} */

/* Media query for touch devices */
@media (hover: none) and (pointer: coarse) {
  .gsap-cursor-container,
  .cursor-dot,
  .cursor-follower,
  .cursor-aura,
  .cursor-trails-container,
  .cursor-trail,
  .cursor-ripple {
    display: none !important;
  }
  
  * {
    cursor: auto !important;
  }
}

.circular-icon {
  width: 100px;
  height: 100px;
  border-radius: 50%; /* makes the container circular */
  overflow: hidden;   /* ensures content doesn’t overflow the circle */
}


/* In your CSS or a global style */
.will-change-transform {
  transform: translateZ(0);
}

.debug-layout * {
  outline: 1px solid rgba(255, 0, 0, 0.2) !important;
}


@layer utilities {
  .scroll-section {
    @apply relative min-h-screen w-full;
  }
  
  .parallax-bg {
    @apply relative w-full h-full transform will-change-transform;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  
  body {
    @apply bg-background text-foreground;
  }
}

/* Add to your globals.css */

/* Smooth scroll container */
.smooth-scroll {
  @apply fixed inset-0 w-full;
  overflow: hidden;
  pointer-events: none;
}

/* Enable hardware acceleration */
.parallax-content {
  @apply relative w-full;
  transform: translateZ(0);
  will-change: transform;
}

/* Parallax sections */
.parallax-section {
  @apply relative overflow-hidden;
  transform-style: preserve-3d;
}

/* Different parallax speeds */
.parallax-slow {
  --parallax-speed: 0.3;
}

.parallax-medium {
  --parallax-speed: 0.5;
}

.parallax-fast {
  --parallax-speed: 0.7;
}

/* Depth layers */
.parallax-deep {
  transform: translateZ(-100px) scale(2);
}

.parallax-shallow {
  transform: translateZ(-50px) scale(1.5);
}

.parallax-surface {
  transform: translateZ(0) scale(1);
}

/* Premium visual effects */
@media screen and (min-width: 768px) {
  /* Only apply backdrop filters on larger screens */
  .premium-blur {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }
}
.premium-shadow {
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}

/* Smooth transition */
.smooth-transition {
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 500ms;
}

:root {
  /* Font size scale */
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;
  
  /* Line heights */
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.75;
  
  /* Font weights */
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;

  /* Letter spacing */
  --letter-spacing-tight: -0.025em;
  --letter-spacing-normal: 0;
  --letter-spacing-wide: 0.025em;
}



@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/landing.tsx
================
"use client";
import { useState, useRef, useEffect, lazy } from "react"
import { motion, AnimatePresence, useInView } from "framer-motion"
import { v4 as uuidV4 } from "uuid"
import { toast } from "sonner"
import {
  Sparkles,
  Code,
  Terminal,
  Zap,
  Globe,
  Users,
  Laptop,
  Server,
  GitBranch,
  Boxes,
} from "lucide-react"
import {
  FloatingHexagon,
  CodeBlock,
} from "@/components/Dashboard/Decorative"
import { HoverCard } from "@/components/Dashboard/cards/HoverCard"
import { StatsCard } from "@/components/Dashboard/cards/StatsCard"
import { GlowingButton } from "@/components/Dashboard/buttons/GlowingButton"
import { FuturisticInput } from "@/components/Dashboard/buttons/FuturisticInput"
import dynamic from "next/dynamic"
import { Skeleton } from "@/components/ui/skeleton"

const RevealAnimation = dynamic(
  () => import('@/components/Dashboard/animations/RevealAnimation').then((mod) => mod.RevealAnimation),
);

const LoadingScreen = dynamic(() => import('@/components/Dashboard/LoadingScreen'), {
  ssr: false,
  loading: () => <div></div>,
});

const EnhancedCursor = dynamic(
  () => import('@/components/Dashboard/Cursor').then((mod) => mod.default),
  { ssr: false }
);

const WhyCodeConnect = dynamic(
  () => import('@/components/Dashboard/cards/WhyCodeConnect'),
  {
    loading: () => (
      <div className="w-full h-96 animate-pulse bg-gray-800/50 rounded-xl">
        <Skeleton className="h-full w-full rounded-xl" />
      </div>
    ),
    ssr: true
  }
)

const CodeConnectSlider = lazy(() => import('@/components/Dashboard/Slider'));

const MoreUseCases = dynamic(
  () => import('@/components/Dashboard/cards/MoreUseCases'),
  {
    loading: () => (
      <div className="w-full h-64 animate-pulse bg-gray-800/50 rounded-xl">
        <Skeleton className="h-full w-full rounded-xl" />
      </div>
    ),
    ssr: true
  }
)

const AnimatedBackground = dynamic(
  () => import("@/components/Dashboard/animations/AnimatedBackground").then(mod => mod.AnimatedBackground),
  {
    ssr: false,
    loading: () => <div className="absolute inset-0 bg-gradient-to-b from-slate-900 to-slate-800" />
  }
);

const NeonGlow = dynamic(
  () => import('@/components/Dashboard/animations/NeonGlow').then(mod => mod.NeonGlow),
  {
    ssr: false,
    loading: () => null
  }
);

const FAQSection = dynamic(
  () => import('@/components/Dashboard/FaqSection'),
  {
    loading: () => (
      <div className="w-full h-96 animate-pulse bg-gray-800/50 rounded-xl">
        <Skeleton className="h-full w-full rounded-xl" />
      </div>
    ),
    ssr: true
  }
)

export default function CodeConnect() {
  const [roomId, setRoomId] = useState("")
  const [username, setUsername] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [pageLoading, setPageLoading] = useState(true)
  const formRef = useRef(null)
  const isInView = useInView(formRef, { once: true })

  useEffect(() => {
    console.log("Mounted");
    return () => console.log("Unmounted");
  }, []);

  const handleJoin = async () => {
    if (!roomId || !username) {
      toast.error("Please enter both room ID and username")
      return
    }

    try {
      setIsLoading(true)
      const baseUrl = window.location.origin
      window.location.href = `${baseUrl}/editor/${roomId}?username=${encodeURIComponent(username)}`
    } catch (error) {
      console.error("Join error:", error)
      toast.error("Failed to join room")
      setIsLoading(false)
    }
  }

  const createNewRoom = (e: any) => {
    e.preventDefault()
    const id = uuidV4()
    setRoomId(id)
    navigator.clipboard.writeText(id).then(() => {
      toast.success("Created a new room", {
        description: "Room ID copied to clipboard!",
      })
    })
  }

  const handleInputKeyUp = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleJoin()
    }
  }

  return (
    <div className="relative w-full overflow-hidden">
      <LoadingScreen />
      <EnhancedCursor />
      
      {/* Main Content - starts after navbar */}
      <div className="pt-12"> {/* Increased padding to account for larger initial navbar */}
        {/* Remove PremiumParallax wrapper that's interfering with scroll detection */}
        <div className="relative min-h-screen bg-gradient-to-b from-slate-900 via-slate-700 to-slate-800 text-white overflow-hidden">
          <div className="items-center justify-center text-center">
            <AnimatedBackground />
          </div>
          <NeonGlow />
          <div className="absolute inset-0 overflow-hidden">
            {[...Array(30)].map((_, i) => (
              <FloatingHexagon key={i} delay={i * 0.3} />
            ))}
          </div>

            <div className="z-10 relative">
              <RevealAnimation>
                <div className="container mx-auto px-4 py-20">
                  <RevealAnimation
                    effect={["fade", "slide", "blur"]}
                    duration={0.8}
                    delay={0.2}
                  >
                    <main className="z-10 flex flex-col lg:flex-row items-center justify-between gap-12">
                      <motion.div
                        className="lg:w-1/2"
                        initial={{ opacity: 0, x: -100 }}
                        animate={isInView ? { opacity: 1, x: 0 } : {}}
                        transition={{ duration: 0.8, ease: "easeOut" }}
                      >
                        <motion.h1
                          className="text-4xl lg:text-5xl font-bold mb-6 leading-tight"
                          variants={{
                            hidden: { opacity: 0, y: 50 },
                            visible: { opacity: 1, y: 0 },
                          }}
                          initial="hidden"
                          animate="visible"
                          transition={{ duration: 0.8, delay: 0.3 }}
                        >
                          Collaborate in Real-Time <br />
                          with{" "}
                          <motion.span
                            className="bg-gradient-to-r from-cyan-400 to-blue-500 text-transparent bg-clip-text"
                            animate={{
                              backgroundPosition: ["0%", "100%", "0%"],
                            }}
                            transition={{
                              duration: 10,
                              repeat: Number.POSITIVE_INFINITY,
                              repeatType: "reverse",
                            }}
                          >
                            CodeConnect
                          </motion.span>
                        </motion.h1>
                        <motion.p
                          className="text-xl text-slate-300 mb-8"
                          variants={{
                            hidden: { opacity: 0, y: 50 },
                            visible: { opacity: 1, y: 0 },
                          }}
                          initial="hidden"
                          animate="visible"
                          transition={{ duration: 0.8, delay: 0.4 }}
                        >
                          Join a room, share your code, and build amazing projects together. Experience seamless collaboration
                          like never before.
                        </motion.p>
                        <div className="grid grid-cols-2 gap-4 mb-8">
                          <StatsCard icon={Globe} title="Active Rooms" value="1,234" capacity="2k" />
                          <StatsCard icon={Users} title="Connected Devs" value="567" capacity="10k" />
                        </div>
                        <CodeBlock />
                      </motion.div>
                      <motion.div
                        ref={formRef}
                        className="lg:w-1/2 w-full max-w-md"
                        initial={{ opacity: 0, x: 100 }}
                        animate={isInView ? {
                          opacity: 1,
                          x: 0,
                        } : {}}
                        transition={{
                          duration: 1.2,
                          delay: 0.4,
                          ease: [0.22, 1, 0.36, 1]
                        }}
                      >
                        <motion.div
                          className="bg-slate-900/95 backdrop-blur-2xl rounded-2xl p-8 shadow-2xl "
                          whileHover={{
                            boxShadow: "0 0 50px 0 rgba(6, 182, 212, 0.3)",
                            scale: 1.02,
                            transition: {
                              duration: 0.4,
                              ease: "easeOut"
                            }
                          }}
                          initial={{ scale: 0.95, opacity: 0 }}
                          animate={{ scale: 1, opacity: 1 }}
                          transition={{
                            duration: 0.8,
                            delay: 0.6,
                            ease: [0.34, 1.56, 0.64, 1]
                          }}
                        >
                          <h2 className="text-2xl font-bold mb-6 text-center">Join a Room</h2>
                          <div className="space-y-6">
                            <FuturisticInput
                              label="Room ID"
                              id="room-id"
                              icon={Terminal}
                              value={roomId}
                              onChange={(e: any) => setRoomId(e.target.value)}
                              onKeyUp={handleInputKeyUp}
                              placeholder="Enter room ID"
                            />
                            <FuturisticInput
                              label="Username"
                              id="username"
                              icon={Users}
                              value={username}
                              onChange={(e: any) => setUsername(e.target.value)}
                              onKeyUp={handleInputKeyUp}
                              placeholder="Choose a username"
                            />
                            <GlowingButton
                              className="w-full"
                              onClick={async () => {
                                setIsLoading(true);
                                await new Promise(resolve => setTimeout(resolve, 2000));
                                handleJoin();
                              }}
                              disabled={isLoading}
                            >
                              <AnimatePresence mode="wait">
                                {isLoading ? (
                                  <motion.div
                                    key="loading"
                                    className="flex items-center justify-center"
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    exit={{ opacity: 0, y: -10 }}
                                    transition={{
                                      duration: 0.4,
                                      ease: "easeOut"
                                    }}
                                  >
                                    <motion.div
                                      animate={{
                                        rotate: 360,
                                      }}
                                      transition={{
                                        duration: 2,
                                        repeat: Number.POSITIVE_INFINITY,
                                        ease: "linear",
                                      }}
                                    >
                                      <Code className="w-5 h-5 mr-2" />
                                    </motion.div>
                                    Connecting...
                                  </motion.div>
                                ) : (
                                  <motion.div
                                    key="join"
                                    className="flex items-center justify-center"
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    exit={{ opacity: 0, y: -10 }}
                                    transition={{
                                      duration: 0.4,
                                      ease: "easeOut"
                                    }}
                                  >
                                    <Sparkles className="w-5 h-5 mr-2" />
                                    Join Room
                                  </motion.div>
                                )}
                              </AnimatePresence>
                            </GlowingButton>
                          </div>
                          <p className="text-center text-sm text-slate-400 mt-6">
                            Don&apos;t have an invite?{" "}
                            <motion.button
                              onClick={createNewRoom}
                              className="text-cyan-400 hover:text-cyan-300 transition-colors relative group"
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                              transition={{
                                duration: 0.2,
                                ease: "easeOut"
                              }}
                            >
                              Create New Room
                              <span className="absolute bottom-0 left-0 w-0 h-px bg-cyan-300 transition-all duration-500 ease-out group-hover:w-full" />
                            </motion.button>
                          </p>
                        </motion.div>
                      </motion.div>
                    </main>
                  </RevealAnimation>
                </div>
              </RevealAnimation>

              <RevealAnimation>
                <motion.section id="features" className="mt-32 px-6 justify-center items-center mx-auto">
                  <h2 className="text-4xl font-bold text-center mb-16">Key Features</h2>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-8 w-full">
                    <HoverCard
                      icon={Laptop}
                      title="Real-time Collaboration"
                      description="Code together in real-time with multiple developers, just like you're in the same room."
                    />
                    <HoverCard
                      icon={Server}
                      title="Secure Rooms"
                      description="Create private, secure rooms for your team to collaborate without worries."
                    />
                    <HoverCard
                      icon={Zap}
                      title="Instant Sync"
                      description="Changes sync instantly across all connected devices, ensuring everyone's always on the same page."
                    />
                  </div>
                </motion.section>
              </RevealAnimation>

              <RevealAnimation>
                <motion.section id="how-it-works" className="mt-32">
                  <h2 className="text-4xl font-bold text-center mb-16">How It Works</h2>
                  <div className="flex flex-col md:flex-row justify-center items-center space-y-8 md:space-y-0 md:space-x-12">
                    {[
                      { icon: GitBranch, title: "Create or Join", description: "Start a new room or join an existing one" },
                      { icon: Users, title: "Collaborate", description: "Work together in real-time with your team" },
                      { icon: Boxes, title: "Build", description: "Create amazing projects faster than ever" },
                    ].map((step, index) => (
                      <motion.div
                        key={step.title}
                        className="flex flex-col items-center text-center"
                        initial={{ opacity: 0, y: 50 }}
                        whileInView={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8, delay: index * 0.2 }}
                      >
                        <div className="relative">
                          <motion.div
                            className="absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full opacity-20"
                            animate={{
                              scale: [1, 1.3, 0.8],
                              opacity: [0.2, 0.1, 0.1],
                            }}
                            transition={{
                              duration: 2,
                              repeat: Number.POSITIVE_INFINITY,
                              repeatType: "reverse",
                            }}
                          />
                          <div className="relative bg-slate-800 p-6 rounded-full">
                            <step.icon className="w-10 h-10 text-cyan-400" />
                          </div>
                        </div>
                        <h3 className="mt-6 text-2xl font-semibold">{step.title}</h3>
                        <p className="mt-2 text-slate-400">{step.description}</p>
                      </motion.div>
                    ))}
                  </div>
                </motion.section>
              </RevealAnimation>

              <RevealAnimation>
                <WhyCodeConnect />
              </RevealAnimation>

              <RevealAnimation>
                <MoreUseCases />
              </RevealAnimation>

              <RevealAnimation>
                <FAQSection />
              </RevealAnimation>

              <RevealAnimation>
                <CodeConnectSlider />
              </RevealAnimation>

              <footer className="mt-32 mb-20 text-center text-sm text-slate-400">
                <p>© 2023 CodeConnect. All rights reserved.</p>
                <p className="mt-2">
                  Built with love by{" "}
                  <a
                    href={"http://github.com/dhaval079"}
                    className="text-cyan-400 hover:text-cyan-300 transition-colors relative group inline-block"
                  >
                    @Dhaval Rupapara
                    <span className="absolute bottom-0 left-0 w-0 h-px bg-cyan-300 transition-all duration-300 ease-out group-hover:w-full" />
                  </a>
                </p>
              </footer>
            </div>
          </div>
        </div>
      </div>
  )
}

================
File: app/layout.tsx
================
// app/layout.tsx or app/layout.jsx
import { Inter } from 'next/font/google'
import "./globals.css"
import { ThemeProvider } from "next-themes"
import { Toaster } from "sonner"
import { SocketProvider } from "@/providers/socketProvider"
import { ClerkProvider } from '@clerk/nextjs'
// Remove next/head if you're fully relying on metadata
// import Head from 'next/head'

const inter = Inter({ subsets: ['latin'], display: 'swap' })

export const metadata = {
  title: 'Code Connect - Real-time Collaborative Coding',
  description: 'Join a room, share your code, and build amazing projects together.',
  icons: [
    { rel: 'icon', url: '/main.svg' },
    { rel: 'icon', url: '/main.svg', sizes: '32x32', type: 'image/png' },
  ],
}
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={inter.className} suppressHydrationWarning={true}>
      <body className="antialiased">
        <ClerkProvider>
          <ThemeProvider attribute="class">
            <SocketProvider>
              {children}
              <Toaster expand={false} position="top-center" richColors theme="dark" />
            </SocketProvider>
          </ThemeProvider>
        </ClerkProvider>
      </body>
    </html>
  )
}

================
File: app/not-found.tsx
================
"use client"
import { Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import { motion } from "framer-motion";
import Link from "next/link";

function NotFoundContent() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-r from-gray-900 to-black text-white">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center"
      >
        <motion.h1
          className="text-6xl font-bold text-gray-100"
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.4 }}
        >
          404
        </motion.h1>
        <p className="mt-4 text-xl text-gray-400">Oops! Page Not Found.</p>

        <motion.div
          className="mt-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
        >
          <Link href="/">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-medium transition-all duration-300 shadow-lg"
            >
              Return Home
            </motion.button>
          </Link>
        </motion.div>
      </motion.div>
    </div>
  );
}


export default function NotFound() {
  return (
    <Suspense fallback={<div></div>}>
      <NotFoundContent />
    </Suspense>
  )
}

================
File: app/page.tsx
================
"use client";
import { useUser } from '@clerk/nextjs'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { Loader2 } from 'lucide-react'
import CodeConnect from './landing'
import UserProfile from '@/components/Dashboard/UserProfile'
import {
  Navbar,
  NavBody,
  NavItems,
  MobileNav,
  NavbarLogo,
  MobileNavHeader,
  MobileNavToggle,
  MobileNavMenu,
} from "@/components/ui/resizable-navbar";

export default function Home() {
  const { isLoaded, isSignedIn } = useUser()
  const router = useRouter()
  
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  // Redirect to auth page if not signed in
  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      router.push('/auth')
    }
  }, [isLoaded, isSignedIn, router])

  // Show loading state before Clerk is loaded
  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center h-screen bg-slate-900">
        <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
      </div>
    )
  }

  // Show loading state while redirecting
  if (!isSignedIn) {
    return (
      <div className="flex items-center justify-center h-screen bg-slate-900">
        <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
      </div>
    )
  }

  const navItems = [
    {
      name: "Features",
      link: "#features",
    },
    {
      name: "How It Works",
      link: "#how-it-works",
    },
    {
      name: "FAQ",
      link: "#faq",
    },
  ];

  return (
    <>
      {/* Fixed Navbar */}
      <Navbar>
        {/* Desktop Navigation */}
        <NavBody>
          <NavbarLogo />
          <NavItems items={navItems} />
          <div className="flex items-center">
            <UserProfile />
          </div>
        </NavBody>
        
        {/* Mobile Navigation */}
        <MobileNav>
          <MobileNavHeader>
            <NavbarLogo />
            <div className="flex items-center gap-3">
              <UserProfile />
              <MobileNavToggle
                isOpen={isMobileMenuOpen}
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              />
            </div>
          </MobileNavHeader>

          <MobileNavMenu
            isOpen={isMobileMenuOpen}
            onClose={() => setIsMobileMenuOpen(false)}
          >
            {navItems.map((item, idx) => (
              <a
                key={`mobile-link-${idx}`}
                href={item.link}
                onClick={() => setIsMobileMenuOpen(false)}
                className="block py-3 text-lg font-medium text-white hover:text-cyan-400 transition-colors border-b border-gray-800 last:border-b-0"
              >
                {item.name}
              </a>
            ))}
          </MobileNavMenu>
        </MobileNav>
      </Navbar>
      
      {/* Main Content */}
      <div className="min-h-screen">
        <CodeConnect />
      </div>
    </>
  )
}
